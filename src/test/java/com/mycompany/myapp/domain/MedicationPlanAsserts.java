package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MedicationPlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationPlanAllPropertiesEquals(MedicationPlan expected, MedicationPlan actual) {
        assertMedicationPlanAutoGeneratedPropertiesEquals(expected, actual);
        assertMedicationPlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationPlanAllUpdatablePropertiesEquals(MedicationPlan expected, MedicationPlan actual) {
        assertMedicationPlanUpdatableFieldsEquals(expected, actual);
        assertMedicationPlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationPlanAutoGeneratedPropertiesEquals(MedicationPlan expected, MedicationPlan actual) {
        assertThat(actual)
            .as("Verify MedicationPlan auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationPlanUpdatableFieldsEquals(MedicationPlan expected, MedicationPlan actual) {
        assertThat(actual)
            .as("Verify MedicationPlan relevant properties")
            .satisfies(a -> assertThat(a.getPlanName()).as("check planName").isEqualTo(expected.getPlanName()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getMedicationName()).as("check medicationName").isEqualTo(expected.getMedicationName()))
            .satisfies(a -> assertThat(a.getColorHex()).as("check colorHex").isEqualTo(expected.getColorHex()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationPlanUpdatableRelationshipsEquals(MedicationPlan expected, MedicationPlan actual) {
        // empty method
    }
}
