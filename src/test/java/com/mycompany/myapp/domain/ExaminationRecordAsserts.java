package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExaminationRecordAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExaminationRecordAllPropertiesEquals(ExaminationRecord expected, ExaminationRecord actual) {
        assertExaminationRecordAutoGeneratedPropertiesEquals(expected, actual);
        assertExaminationRecordAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExaminationRecordAllUpdatablePropertiesEquals(ExaminationRecord expected, ExaminationRecord actual) {
        assertExaminationRecordUpdatableFieldsEquals(expected, actual);
        assertExaminationRecordUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExaminationRecordAutoGeneratedPropertiesEquals(ExaminationRecord expected, ExaminationRecord actual) {
        assertThat(actual)
            .as("Verify ExaminationRecord auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExaminationRecordUpdatableFieldsEquals(ExaminationRecord expected, ExaminationRecord actual) {
        assertThat(actual)
            .as("Verify ExaminationRecord relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getExamDate()).as("check examDate").isEqualTo(expected.getExamDate()))
            .satisfies(a -> assertThat(a.getFile()).as("check file").isEqualTo(expected.getFile()))
            .satisfies(a -> assertThat(a.getFileContentType()).as("check file contenty type").isEqualTo(expected.getFileContentType()))
            .satisfies(a -> assertThat(a.getOriginalFilename()).as("check originalFilename").isEqualTo(expected.getOriginalFilename()))
            .satisfies(a -> assertThat(a.getStoredFilename()).as("check storedFilename").isEqualTo(expected.getStoredFilename()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExaminationRecordUpdatableRelationshipsEquals(ExaminationRecord expected, ExaminationRecord actual) {
        assertThat(actual)
            .as("Verify ExaminationRecord relationships")
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()));
    }
}
