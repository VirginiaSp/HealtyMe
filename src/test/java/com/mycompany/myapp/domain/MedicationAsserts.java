package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MedicationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationAllPropertiesEquals(Medication expected, Medication actual) {
        assertMedicationAutoGeneratedPropertiesEquals(expected, actual);
        assertMedicationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationAllUpdatablePropertiesEquals(Medication expected, Medication actual) {
        assertMedicationUpdatableFieldsEquals(expected, actual);
        assertMedicationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationAutoGeneratedPropertiesEquals(Medication expected, Medication actual) {
        assertThat(actual)
            .as("Verify Medication auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationUpdatableFieldsEquals(Medication expected, Medication actual) {
        assertThat(actual)
            .as("Verify Medication relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getRating()).as("check rating").isEqualTo(expected.getRating()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getDosage()).as("check dosage").isEqualTo(expected.getDosage()))
            .satisfies(a -> assertThat(a.getFrequency()).as("check frequency").isEqualTo(expected.getFrequency()))
            .satisfies(a -> assertThat(a.getSideEffects()).as("check sideEffects").isEqualTo(expected.getSideEffects()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastTaken()).as("check lastTaken").isEqualTo(expected.getLastTaken()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationUpdatableRelationshipsEquals(Medication expected, Medication actual) {
        assertThat(actual)
            .as("Verify Medication relationships")
            .satisfies(a -> assertThat(a.getCategories()).as("check categories").isEqualTo(expected.getCategories()));
    }
}
